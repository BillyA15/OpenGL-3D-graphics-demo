#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 crntPos;
// Values that stay constant for the whole mesh.
uniform mat4 VP;
uniform mat4 M;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	crntPos = vec3(M * vec4(vertexPosition_modelspace, 1.0f));

	gl_Position =  VP*M * vec4(vertexPosition_modelspace,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

